//I'm put this class in tower because the tower controller handles all the bricks

function Brick(x, y, p, color){
	const BRICK_WIDTH = <%= Rails.configuration.x.brick_width %>;
	const BRICK_HEIGHT = <%= Rails.configuration.x.brick_height %>;
	const COLUMNS = <%= Rails.configuration.x.bricks_layer %>;
	const BPL = <%= Rails.configuration.x.level_height %>;

	var OFFSET = (p.width - BRICK_WIDTH * COLUMNS)/2;
	Brick.level = 0;

	this.screenX = xToScreen(x);
	this.screenY = yToScreen(y);
	console.log("Brick 5 y: " + yToScreen(5));

	function xToScreen(x){
		return x * BRICK_WIDTH + OFFSET;
	}

	function yToScreen(y){
		return p.height - (y+1 - Brick.level * (BPL - 2)) * BRICK_HEIGHT ;
	}

	// Converts the screen position to the nearest x,y position
	function screenToX(x){
		return Math.floor((x-OFFSET)/BRICK_WIDTH);
	}

	function screenToY(y){
		return Math.floor((p.height-y)/BRICK_HEIGHT) + this.constructor.level * (BPL -2);
	}

	//gives the screen coordinates of the nearest brick, based on a given screen coord
	function nearestBrickX(x){
		return xToScreen(screenToX(x));
	}

	function nearestBrickY(y){
		return yToScreen(screenToY(y));
	}

	this.pickFill = function(){
		switch (color){
			case 0:
				p.fill(200, 0, 0);
				break;
			case 1:
				p.fill(0, 200, 0);
				break;
			case 2:
				p.fill(0, 0, 200);
				break;
			default:
				p.fill(0);
		}
	}

	this.draw = function(p5){
		this.pickFill();
		p5.rect(screenX, screenY, BRICK_WIDTH, BRICK_HEIGHT);
	}
}