//Brick and BrickCalc help keep track of where all the tower is and
//where all the bricks are. Keeping all that data in it's own object
//means I can reuse the code for both placing bricks and viewing the tower. Very useful

function Brick(startX, startY, color, strength){
  var x = startX;
	var y = startY;
	this.id;
  this.playerID;
  this.new = false;

	this.update = function(newX, newY){
		x = newX;
		y = newY;
	};

  //A function that makes the brick fall a little bit. Currently not used for anything
	this.fall = function(){
		y -= 0.1;
	};

	this.isWithin = function(mouseX, mouseY){
		return (screenToX(mouseX) == x && screenToY(mouseY) == y)
	};

	this.x = function(){
		return x;
	};

	this.y = function(){
		return y;
	};

	this.color = function(){
		return color;
	};

  this.strength = function(){
    return strength;
  };

	this.level = function(){
		return Math.floor((y - 1) / BPL);
	};
}

function BrickCalc(p){
  //Pulls in a lot of globals here
  this.BRICK_WIDTH = <%= Global.tower.brick_width %>;
  this.BRICK_HEIGHT = <%= Global.tower.brick_height %>;
  this.COLUMNS = <%= Global.tower.bricks_layer %>;
  this.BPL = <%= Global.tower.level_height %>;
  this.MAX_LEVELS = <%= Global.tower.max_levels %>;

  this.offset = (p.width - this.BRICK_WIDTH * this.COLUMNS)/2;
  this.verticalOffset = 0;
  this.leftbound = this.BRICK_WIDTH;
  this.rightbound = p.width - (this.BRICK_WIDTH * this.COLUMNS + this.BRICK_WIDTH);
  this.upperbound = this.BRICK_HEIGHT * this.BPL * this.MAX_LEVELS * -1;
  this.zoom = 0;

  this.level;

  this.moveLeft = function(){
    if(this.BRICK_WIDTH * this.COLUMNS > p.width){
      this.offset += 11;
      if(this.offset > this.leftbound){
        this.offset = this.leftbound;
      }
    }else{
      this.center();
    }
  };

  this.setOffset = function(x){
    this.offset = p.width/2 - this.BRICK_WIDTH * x;
    if(this.offset > this.leftbound){
      this.offset = this.leftbound;
    }else if (this.offset < this.rightbound) {
      this.offset = this.rightbound;
    }
  }

  this.moveRight = function(){
    if(this.BRICK_WIDTH * this.COLUMNS > p.width) {
      this.offset -= 11;
      if (this.offset < this.rightbound) {
        this.offset = this.rightbound;
      }
    }else{
      this.center();
    }
  };

  //There should be some limit on how far up you can go
  this.moveUp = function(){
    if(this.BRICK_WIDTH * this.BPL * this.MAX_LEVELS > p.height){
      this.verticalOffset -= 15;
      if(this.verticalOffset < this.upperbound){
        this.verticalOffset = this.upperbound;
      }
    }else{
      this.verticalOffset = 0;
    }
  };

  this.moveDown = function(){
    this.verticalOffset += 15;
    if(this.verticalOffset > 0){
      this.verticalOffset = 0;
    }
  };

  this.makeSmaller = function(){
    if(this.BRICK_WIDTH > 2.5){
      this.zoom++;
      this.BRICK_WIDTH *= 0.5;
      this.BRICK_HEIGHT *= 0.5;
      this.reviseBounds();
      //This always put the offset at the halfway point, which is less than ideal
      this.offset = (p.width - this.BRICK_WIDTH * this.COLUMNS)/2;
    }
  };

  this.makeLarger = function(){
    if(this.BRICK_WIDTH < <%= Global.tower.brick_width %>){
      this.zoom--;
      this.BRICK_WIDTH *= 2;
      this.BRICK_HEIGHT *= 2;
      this.reviseBounds();
      this.offset = (p.width - this.BRICK_WIDTH * this.COLUMNS)/2;
    }
  };

   this.reviseBounds = function(){
    this.rightbound = p.width - (this.BRICK_WIDTH * this.COLUMNS + 10);
     this.leftbound = this.BRICK_WIDTH;
    this.upperbound = this.BRICK_HEIGHT * this.BPL * this.MAX_LEVELS * -1;
  }

  this.center = function(){
    this.offset = (p.width - this.BRICK_WIDTH * this.COLUMNS)/2;
  }

  //Given an coordinate, shows where on the screen to draw
  this.xToScreen = function(thisX){
    return thisX * this.BRICK_WIDTH + this.offset;
  };

  this.yToScreen = function(thisY){
    return p.height - (thisY+1 - this.level * this.BPL) * this.BRICK_HEIGHT + this.BRICK_HEIGHT/2 - this.verticalOffset;
  };

  // Converts the screen position to the nearest x,y position
  this.screenToX = function(x){
    return Math.floor((x - this.offset)/this.BRICK_WIDTH);
  };

  this.screenToY = function(y){
    return Math.floor((p.height-y+this.BRICK_HEIGHT/2-this.verticalOffset)/this.BRICK_HEIGHT) + this.level * this.BPL;
  };

  this.withinLevel = function(x, y){
    return (x >= 0 && x < this.COLUMNS && Math.floor((y - 1) / this.BPL) == this.level);
  }
}