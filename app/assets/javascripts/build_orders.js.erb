$(document).ready(function(){
	//If there's already a canvas loaded or it's the wrong page, don't load this page
	if($("canvas").size() > 0 || $(".build_orders.new").length == 0){
		return false;
	}

	var sketch = function(p){
		const BRICKS = <%= Global.tower.shipment %>;
		const SHIPMENTSIZE = <%= Global.tower.shipment_size %>

		var USER_ID;
		var tower = [];
		var newBricks = [];
		var finish = false;
		var ar = [];
		var maxLevel;

		var background;
		var backgrounds = ["level_one.jpg", "level_two.jpg", "level_three.jpg", "level_four.jpg", "level_five.jpg", "level_six.jpg"];

		//-----------------------------------P5 FUNCTIONS---------------------------------------------
		p.setup = function(){
			canvas = p.createCanvas(p.windowWidth - 550, <%= Global.tower.brick_height * (Global.tower.level_height + Global.tower.overlap) %>);
			canvas.parent("canvas");
			background = p.loadImage("../" + backgrounds[0]);
			background2 = p.loadImage("../" + backgrounds[1]);


			$.get('/session.json', function(data){
				USER_ID = data["id"];
				maxLevel = data["max_level"]
				Brick.level = maxLevel - 1;
				Brick.level = 0;
				setLevel();

				ar = data["ar"];
				for(var i = 0; i < ar.length + 1; i++){
					newBricks.push(new Brick(50, 2, p, data["color"], 0));
				}
			});
		};

		p.draw = function(){
			p.background(100);
			p.image(background, 0, 0, background.width, background.height, ((Brick.offset-10) % p.width), 0, p.width, p.height);
			p.image(background, 0, 0, background.width, background.height, ((Brick.offset-10) % p.width + p.width), 0, p.width, p.height);

			//Draws the bricks from the tower
			p.stroke(0);
			p.strokeWeight(1);
			for(var i = 0; i < tower.length; i++){
				tower[i].draw();
			}

			//Draws the player's bricks
			p.stroke(255);
			p.strokeWeight(3);
			for(var i = 0; i < newBricks.length; i++){
				newBricks[i].draw(finish);
			}

			//Draws the information block in the upper left
			var interval = (Math.floor((Brick.level+1) / 2)) * 5;
			var requiredStrength = Math.floor((Brick.level+1)/3);

			p.fill(255);
			p.stroke(0);
			if(requiredStrength <= 0){
				p.rect(0, 0, 250, 70);
			}else{
				p.rect(0, 0, 250, 100);
			}
			p.fill(0);
			p.strokeWeight(1);
			p.textSize(20);
			p.text("Level: " + Brick.level, 10, 25);
			if(interval == 0){
				p.text("Update Rate: Immediate", 10, 50);
			}else{
				p.text("Update Rate: " + interval + " minutes", 10, 50);
			}

			if(requiredStrength > 0){
				p.text("Required Strength: " + requiredStrength, 10, 75);
			}

			//Draw navigation arrows
			p.fill(100);
			//Up and down arrows
			if(p.mouseY < Brick.BRICK_HEIGHT && Brick.level < maxLevel){
				p.triangle(p.width/2, 5, p.width/2 - 40, (Brick.BRICK_HEIGHT-10)/2, p.width/2 + 40, (Brick.BRICK_HEIGHT-10)/2);
			}else if(p.mouseY > p.height - Brick.BRICK_HEIGHT && Brick.level > 0){
				p.triangle(p.width/2, p.height-5, p.width/2 - 40, p.height - (Brick.BRICK_HEIGHT-10)/2, p.width/2 + 40, p.height - (Brick.BRICK_HEIGHT-10)/2);
			}

			//Left and right arrows
			if(p.mouseX < Brick.BRICK_WIDTH){
				p.triangle(5, p.height/2, Brick.BRICK_WIDTH-10, p.height/2 - 40, Brick.BRICK_WIDTH - 10, p.height/2 + 40);
			}else if(p.mouseX > p.width - Brick.BRICK_WIDTH){
				p.triangle(p.width - 5, p.height/2, p.width - Brick.BRICK_WIDTH+10, p.height/2 - 40, p.width - Brick.BRICK_WIDTH + 10, p.height/2 + 40);
			}

			if(p.mouseX < Brick.BRICK_WIDTH && p.mouseX > 0 && p.mouseY > p.height/2 - 40 && p.mouseY < p.height/2 + 40){
				Brick.moveLeft();
			}else if(p.mouseX > p.width-Brick.BRICK_WIDTH && p.mouseX < p.width && p.mouseY > p.height/2 - 40 && p.mouseY < p.height/2 + 40){
				Brick.moveRight();
			}
		};

		p.mouseClicked = function(){
			if(p.mouseY < Brick.BRICK_HEIGHT/2 && p.mouseY >= 0 && Brick.level < maxLevel){
				Brick.level++;
				setLevel();
			}else if(p.mouseY > p.height - Brick.BRICK_HEIGHT/2 && p.mouseY < p.height && Brick.level > 0){
				Brick.level--;
				setLevel();
			}else if(p.mouseX > Brick.BRICK_WIDTH && p.mouseX < p.width - Brick.BRICK_WIDTH && p.mouseY > 0 && p.mouseY < p.height){
				if(!finish){
					//console.log("Brick at " + newBricks[0].x() + ", " + newBricks[0].y() + " level: " + newBricks[0].level());
					finish = true;
					$("#bricks").hide();
					$("#messages").hide();
					updateAlert(Brick.level, finish);
					$("#left").hide();
					$("#right").hide();
					$("#remove").show();
					loadKeyboard(newBricks);
				}else if (withinPlaced(p.mouseX, p.mouseY) && finish){
					moveBricks();
				}
			}
		}

		p.mouseMoved = function(){
			if(p.mouseY < p.height && p.mouseY > 0 && p.mouseX > 0 && p.mouseX < p.width && !finish){
				updateBricks(p.mouseX, p.mouseY);
			}
		};

		p.keyPressed = function(){
			switch(p.keyCode){
				case 65: //A, rotate the bricks
					if(!finish){
						for(var i = 0; i < ar.length; i++){
							var new_ar = [0, 0];
							new_ar[0] = ar[i][1] * -1;
							new_ar[1] = ar[i][0];
							ar[i] = new_ar;
						}
						updateBricks(p.mouseX, p.mouseY);
					}
					break;
				case 68: //D, rotate the bricks
					if(!finish){
						for(var i = 0; i < ar.length; i++){
							var new_ar = [0, 0];
							new_ar[1] = ar[i][0] * -1;
							new_ar[0] = ar[i][1];
							ar[i] = new_ar;
						}
						updateBricks(p.mouseX, p.mouseY);
					}
					break;
				case 83: //S, pick up bricks
					if(finish){
						moveBricks();
						updateBricks(p.mouseX, p.mouseY);
					}
					break;
				case 39: //Right arrow key, move around tower
					Brick.moveRight();
					break;
				case 37: //Left arrow key, move around tower
					Brick.moveLeft();
					break;
				case 38: //Up arrow key, move up a level
					if(Brick.level < maxLevel){
						Brick.level++;
						setLevel();
					}
					break;
				case 40: //Down arrow key, move down a level
					if(Brick.level > 0){
						Brick.level--;
						setLevel();
					}
					break;
				default:
					//Do nothing
			}
		};

		//------------------------------------------OTHER FUNCTIONS------------------------------------
		//Is the given screen coordinates inside the new bricks?
		function withinPlaced(x, y){
			for(var i = 0; i < newBricks.length; i++){
				if(newBricks[i].isWithin(x, y)){
					return true;
				}
			}
			return false;
		}

		//Takes the new bricks and moves them to the given coordinates
		function updateBricks(x, y){
			if(!Brick.withinTower(x, 0) || !Brick.onLevel(y, 0)){
				return false;
			}
			for(var i = 0; i < ar.length; i++){
				if(!Brick.withinTower(x, ar[i][0]) || !Brick.onLevel(y, ar[i][1])){
					return false;
				}
			}
			newBricks[0].update(x, y, 0, 0);
			for(var i = 0; i < ar.length; i++){
				newBricks[i+1].update(x, y, ar[i][0], ar[i][1]);
			}
		}

		function setLevel(){
			loadTower(Brick.level);
			loadOrders(Brick.level, 0);
			setBackground(Brick.level);
			updateAlert(Brick.level, finish);
		}

		//Removes the keyboard and lets you move the bricks again
		function moveBricks(){
			finish = false;

			$("#remove").hide();

			$("#bricks").show();
			$("#messages").show();
			$("#left").show();
			$("#right").show();

			$("#message_form").remove();
			updateAlert(Brick.level, finish);
		}

		//Loads the tower from the server
		function loadTower(requestedLevel){
			tower = [];
			$.get('/tower/'+requestedLevel + '.json', {level: requestedLevel}, function(data){
				for(var i = 0; i < data.length; i++){
					tower.push(new Brick(data[i]["x"], data[i]["y"], p, data[i]["color"], data[i]["strength"]));
				}
			});
		}

		//Sets the new background
		function setBackground(level){
			var index = Math.min(level, backgrounds.length - 1);
			background = p.loadImage("../" + backgrounds[index]);
		}

		//I'm going to be doing a lot of this, so I should come up with a better way to do this sort of thing
		function updateAlert(level, placed){
			if(level == 0){
				if(placed){
					$("#instructions").html("Press submit to add your brick to the tower! Or, click on your brick or press S to pick the brick back up and put it somewhere else.");
				}else{
					$("#instructions").html("Put your bricks on the tower to build it higher! Bricks needs to have bricks underneath them or they will fall and be destroyed. If you place your bricks on top of other bricks, they'll get stronger if their colors match and weaker if they don't. If a brick's strength falls too far, it'll be destroyed! A brick's strength is equal to the number of lines on it.");
				}
			}else if(level == 1){
				if(placed){
					$("#instructions").html("Your bricks will be added to the tower " + nextTime(level) +". Write a message to tell other builders where they'll be. Click on the glyphs below to write your message. Click on glyphs in the message to delete them. From now on, all bricks must have messages!");
				}else{
					$("#instructions").html("At this height it takes time to put bricks on the tower! All bricks placed on this level will be added to the tower every five minutes, all at once.");
				}
			}else if(level == 2){
				if(!placed){
					$("#instructions").html("Heavy winds on this level will destroy any bricks which don't have at least one strength. Use the messages to communicate where you're putting bricks with other builders and overlap bricks of the same color to make them strong enough.");
				}else{
					$("#instructions").html("Use your message to help other builders strengthen your bricks and survive the winds! All bricks will be added to the tower " + nextTime(level) +".");
				}
			}else if(level == 3){
				if(!placed){
					$("#instructions").html("The higher the tower gets, the longer is takes to build. Orders are now resolved every 10 minutes.");
				}else{
					$("#instructions").html("Use your message to help other builders strengthen your bricks and survive the winds! All bricks will be added to the tower " + nextTime(level) +".");
				}
			}else{
				if(!placed){
					$("#instructions").html("Keep building the tower!");
				}else{
					$("#instructions").html("Your bricks will be added to the tower " + nextTime(level) +".");
				}
			}
		}
	};

	var myp5 = new p5(sketch);
});