$(document).ready(function(){
	//If there's already a canvas loaded or it's the wrong page, don't load this page
	if($("canvas").size() > 0 || $(".build_orders.new").length == 0){
		return false;
	}

	var sketch = function(p){
		const BRICKS = <%= Global.tower.shipment %>;
		const SHIPMENTSIZE = <%= Global.tower.shipment_size %>

		var USER_ID;
		var tower = [];
		var newBricks = [];
		var finish = false;
		var ar = [];
		var maxLevel = false;

		var background;
		var backgrounds = ["level_one.jpg", "level_two.jpg", "level_three.jpg", "level_four.jpg", "level_five.jpg", "level_six.jpg"];

		//-----------------------------------P5 FUNCTIONS---------------------------------------------
		p.setup = function(){
			canvas = p.createCanvas(p.windowWidth - 550, <%= Global.tower.brick_height %> * <%= Rails.configuration.x.level_height %>);
			canvas.parent("canvas");

			Brick.level = 0;
			loadTower(Brick.level);
			loadOrders(Brick.level, 0);

			var color = Math.floor(Math.random() * 2);
			for(var i = 0; i < SHIPMENTSIZE; i++){
				newBricks.push(new Brick(-1, -1, p, color, 0));
			}
			generateArrangement();

			$.get('/session.json', function(data){
				USER_ID = data;
			});

			$("#remove").hide();

			background = p.loadImage("../level_one.jpg");
		};

		p.draw = function(){
			//p.background(p.lerpColor(p.color(200), p.color(0), Brick.level/maxLevel));
			p.image(background, 0, 0, background.width, background.height, 0, 0, p.width, p.height);

			//Draws the bricks from the tower
			p.stroke(0);
			p.strokeWeight(1);
			for(var i = 0; i < tower.length; i++){
				tower[i].draw();
			}

			//Draws the player's bricks
			p.stroke(255);
			p.strokeWeight(3);
			for(var i = 0; i < newBricks.length; i++){
				newBricks[i].draw(finish);
			}

			p.fill(255);
			p.stroke(0);
			p.rect(0, 0, 250, 70);
			p.fill(0);
			p.strokeWeight(1);
			p.textSize(20);
			p.text("Level: " + Brick.level, 10, 25);
			var interval = ((Brick.level - Brick.level % 2) / 2) * 10;
			if(interval == 0){
				p.text("Update Rate: Immediate", 10, 50);
			}else{
				p.text("Update Rate: " + interval + " minutes", 10, 50);
			}
		};

		p.mouseClicked = function(){
			if(p.mouseX > 0 && p.mouseX < p.width && p.mouseY > 0 && p.mouseY < p.height){
				if(!finish){
					console.log(newBricks[0].level());
					finish = true;
					$("#bricks").hide();
					$("#messages").hide();
					$("#alerts").html("<h4>Instructions</h4>Your bricks will be added to the tower " + nextTime(Brick.level) +" - until then no one will be able to see them. Use the glyphs to write a message so other builders know where you placed your bricks.");
					$("#left").hide();
					$("#right").hide();
					$("#remove").show();
					loadKeyboard(newBricks);
				}else if (withinPlaced(p.mouseX, p.mouseY) && finish){
					moveBricks();
				}
			}
		}

		p.mouseMoved = function(){
			if(p.mouseY < p.height && p.mouseY > 0 && p.mouseX > 0 && p.mouseX < p.width && !finish){
				updateBricks(p.mouseX, p.mouseY);
			}
		};

		p.keyPressed = function(){
			switch(p.keyCode){
				case 65: //A, rotate the bricks
					if(!finish){
						for(var i = 0; i < ar.length; i++){
							var new_ar = [0, 0];
							new_ar[0] = ar[i][1] * -1;
							new_ar[1] = ar[i][0];
							ar[i] = new_ar;
						}
						updateBricks(p.mouseX, p.mouseY);
					}
					break;
				case 68: //D, rotate the bricks
					if(!finish){
						for(var i = 0; i < ar.length; i++){
							var new_ar = [0, 0];
							new_ar[1] = ar[i][0] * -1;
							new_ar[0] = ar[i][1];
							ar[i] = new_ar;
						}
						updateBricks(p.mouseX, p.mouseY);
					}
					break;
				case 83: //S, pick up bricks
					if(finish){
						moveBricks();
						updateBricks(p.mouseX, p.mouseY);
					}
					break;
				case 39: //Right arrow key, move around tower
					Brick.moveRight();
					break;
				case 37: //Left arrow key, move around tower
					Brick.moveLeft();
					break;
				case 38: //Up arrow key, move up a level
					if(!maxLevel){
						Brick.level++;
						loadTower(Brick.level);
						loadOrders(Brick.level, 0);
						setBackground(Brick.level);
					}
					break;
				case 40: //Down arrow key, move down a level
					if(Brick.level > 0){
						Brick.level--;
						loadTower(Brick.level);
						loadOrders(Brick.level, 0);
						setBackground(Brick.level);
					}
					break;
				default:
					//Do nothing
			}
		};

		//------------------------------------------OTHER FUNCTIONS------------------------------------
				
		//Generates the arrangement of bricks. Kind of hacky.
		function generateArrangement(){
			for(var i = 0; i < SHIPMENTSIZE-1; i++){
				ar[i] = []
				for(var j = 0; j < 2; j++){
					ar[i][j] = Math.floor(Math.random()*3-1);
				}
			}
			//Don't put a new brick on top of my old brick!
			if(ar[0][0] == 0 && ar[0][1] == 0){
				ar[0][0] = 1;
			}
			if(ar[1][0] == 0 && ar[1][1] == 0){
				ar[1][0] = -1;
			}
			//If the first and second brick are in the same place
			//Throw away one of them
			if(ar[0][0] == ar[1][0] && ar[0][1] == ar[1][1]){
				ar.shift();
			}
		}

		//Is the given screen coordinates inside the new bricks?
		function withinPlaced(x, y){
			for(var i = 0; i < newBricks.length; i++){
				if(newBricks[i].isWithin(x, y)){
					return true;
				}
			}
			return false;
		}

		//Takes the new bricks and moves them to the given coordinates
		function updateBricks(x, y){
			for(var i = 0; i < ar.length; i++){
				if(!Brick.withinTower(x, ar[i][0])){
					return false;
				}
			}
			newBricks[0].update(x, y, 0, 0);
			for(var i = 0; i < ar.length; i++){
				newBricks[i+1].update(x, y, ar[i][0], ar[i][1]);
			}
		}

		//Removes the keyboard and lets you move the bricks again
		function moveBricks(){
			finish = false;

			$("#remove").hide();

			$("#bricks").show();
			$("#messages").show();
			$("#left").show();
			$("#right").show();

			$("#message_form").remove();
			$("#alerts").html("<h4>Instructions</h4>Place your bricks on the tower to build it higher! Steer clear of where other builders have put their bricks - if two bricks collide, they'll both be destroyed. Bricks without support will fall down and break.");
		}

		//Loads the tower from the server
		function loadTower(requestedLevel){
			tower = [];
			$.get('/tower.json', {level: requestedLevel}, function(data){
				if(data.length == 0){
					maxLevel = true;
				}else{
					maxLevel = false;
					for(var i = 0; i < data.length; i++){
						tower.push(new Brick(data[i]["x"], data[i]["y"], p, data[i]["color"], data[i]["strength"]));
					}
				}
			});
		}

		//Sets the new background
		function setBackground(level){
			var index = Math.min(level, backgrounds.length - 1);
			background = p.loadImage("../" + backgrounds[index]);
		}

		//-------------------------------------------------------------------------------------------------
		//------------------------------------------------JQUERY EVENT HANDLERS----------------------------
		//-------------------------------------------------------------------------------------------------
		
		// $(document).on('click', '#up', function(){
			
		// });

		// $(document).on('click', '#down', function(){
			
		// });
	};

	var myp5 = new p5(sketch);
});