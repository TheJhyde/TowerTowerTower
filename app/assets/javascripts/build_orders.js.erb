$(document).ready(function(){
  //If there's already a canvas loaded or it's the wrong page, don't load this page
  if($("canvas").size() > 0 || $(".build_orders.new").length == 0){
    return false;
  }

  var sketch = function(p) {
    var USER_ID;
    var tower = [];
    var newBricks = [];
    var finish = false;
    var ar = [];
    var maxLevel;
    var calc;

    var interval = 0;
    var requiredStrength = 0;
    var unfinishedText = "";
    var finishText = "";

    var whiteBrick;
    var blackBrick;

    var background;

    //-----------------------------------P5 FUNCTIONS---------------------------------------------
    p.setup = function () {
      var canvas = p.createCanvas(p.windowWidth - 450, <%= Global.tower.brick_height * (Global.tower.level_height + Global.tower.overlap) %>);
      canvas.parent("canvas");
      background = p.loadImage("../level_one.jpg");
      calc = new BrickCalc(p);

      whiteBrick = p.loadImage("/brick-02.png");
      blackBrick = p.loadImage("/brick-01.png");

      $.get('/session.json', function (data) {
        USER_ID = data["id"];
        if (data["max_level"] >= 0) {
          maxLevel = data["max_level"];
          calc.level = data["level"];
        } else {
          calc.level = 0;
          maxLevel = 0;
        }
        setLevel();

        ar = data["ar"];
        for (var i = 0; i < ar.length + 1; i++) {
          newBricks.push(new Brick(50, 2, data["color"], 0));
        }
      });
    };

    p.draw = function () {
      p.background(100);
      p.image(background, 0, 0, background.width, background.height, ((calc.offset - calc.BRICK_WIDTH) % p.width), 0, p.width, p.height);
      p.image(background, 0, 0, background.width, background.height, ((calc.offset - calc.BRICK_WIDTH) % p.width + p.width), 0, p.width, p.height);
      p.filter(p.POSTERIZE, 4);

      //Draws the bricks from the tower
      p.stroke(0);
      p.strokeWeight(1);
      for (var i = 0; i < tower.length; i++) {
        p.stroke(100);
        p.strokeWeight(1);
        drawBrick(tower[i]);
      }

      //Draws the player's bricks
      p.stroke(255);
      p.strokeWeight(3);
      for (var i = 0; i < newBricks.length; i++) {
        p.stroke(0,128,0);
        p.strokeWeight(4);
        if(finish){
          p.tint(255, 180);
          drawBrick(newBricks[i]);
        }else{
          drawBrick(newBricks[i]);
        }
      }

      //Draws the information block in the upper left
      p.fill(255);
      p.stroke(0);
      if (requiredStrength <= 0) {
        p.rect(0, 0, 250, 70);
      } else {
        p.rect(0, 0, 250, 100);
      }
      p.fill(0);
      p.strokeWeight(1);
      p.textSize(20);
      p.text("Level: " + calc.level, 10, 25);
      if (interval == 0) {
        p.text("Update Rate: Immediate", 10, 50);
      } else {
        p.text("Update Rate: " + interval + " minutes", 10, 50);
      }

      if (requiredStrength > 0) {
        p.text("Required Strength: " + requiredStrength, 10, 75);
      }

      //Draw navigation arrows
      p.fill(100);
      //Up and down arrows
      if (p.mouseY < calc.BRICK_HEIGHT && calc.level < maxLevel && p.mouseX > 0 && p.mouseX < p.width) {
        p.triangle(p.width / 2, 5, p.width / 2 - 40, (calc.BRICK_HEIGHT - 10) / 2, p.width / 2 + 40, (calc.BRICK_HEIGHT - 10) / 2);
      } else if (p.mouseY > p.height - calc.BRICK_HEIGHT && calc.level > 0 && p.mouseX > 0 && p.mouseX < p.width) {
        p.triangle(p.width / 2, p.height - 5, p.width / 2 - 40, p.height - (calc.BRICK_HEIGHT - 10) / 2, p.width / 2 + 40, p.height - (calc.BRICK_HEIGHT - 10) / 2);
      }

      //Left and right arrows
      if (p.mouseX < calc.BRICK_WIDTH) {
        p.triangle(5, p.height / 2, calc.BRICK_WIDTH - 10, p.height / 2 - 40, calc.BRICK_WIDTH - 10, p.height / 2 + 40);
      } else if (p.mouseX > p.width - calc.BRICK_WIDTH) {
        p.triangle(p.width - 5, p.height / 2, p.width - calc.BRICK_WIDTH + 10, p.height / 2 - 40, p.width - calc.BRICK_WIDTH + 10, p.height / 2 + 40);
      }

      if (p.mouseX < calc.BRICK_WIDTH && p.mouseX > 0 && p.mouseY > p.height / 2 - 200 && p.mouseY < p.height / 2 + 200) {
        calc.moveLeft();
      } else if (p.mouseX > p.width - calc.BRICK_WIDTH && p.mouseX < p.width && p.mouseY > p.height / 2 - 200 && p.mouseY < p.height / 2 + 200) {
        calc.moveRight();
      }
    };

    p.mouseClicked = function () {
      if (p.mouseY < calc.BRICK_HEIGHT / 2 && p.mouseY >= 0 && calc.level < maxLevel && p.mouseX > 0 && p.mouseX < p.width) {
        calc.level++;
        setLevel();
      } else if (p.mouseY > p.height - calc.BRICK_HEIGHT / 2 && p.mouseY < p.height && calc.level > 0 && p.mouseX > 0 && p.mouseX < p.width) {
        calc.level--;
        setLevel();
      } else if (p.mouseX > calc.BRICK_WIDTH && p.mouseX < p.width - calc.BRICK_WIDTH && p.mouseY > 0 && p.mouseY < p.height) {
        if (!finish) {
          //console.log("Brick at " + newBricks[0].x() + ", " + newBricks[0].y() + " level: " + newBricks[0].level());
          finish = true;
          $("#bricks").hide();
          $("#messages").hide();
          $("#instructions").html(finishText);
          $("#left").hide();
          $("#right").hide();
          $("#remove").show();
          loadKeyboard(newBricks, calc);
        } else if (withinPlaced(p.mouseX, p.mouseY) && finish) {
          moveBricks();
        }
      }
    };

    p.mouseMoved = function () {
      if (p.mouseY < p.height && p.mouseY > 0 && p.mouseX > 0 && p.mouseX < p.width && !finish) {
        updateBricks(calc.screenToX(p.mouseX), calc.screenToY(p.mouseY));
      }
    };

    p.keyPressed = function () {
      switch (p.keyCode) {
        case 32: //A, rotate the bricks
          if (!finish) {
            for (var i = 0; i < ar.length; i++) {
              var new_ar = [0, 0];
              new_ar[0] = ar[i][1] * -1;
              new_ar[1] = ar[i][0];
              ar[i] = new_ar;
            }
            updateBricks(p.mouseX, p.mouseY);
          } else {
            moveBricks();
            updateBricks(p.mouseX, p.mouseY);
          }
          break;
        case 39: //Right arrow key, move around tower
          calc.moveRight();
          break;
        case 37: //Left arrow key, move around tower
          calc.moveLeft();
          break;
        case 38: //Up arrow key, move up a level
          if (calc.level < maxLevel) {
            calc.level++;
            setLevel();
          }
          break;
        case 40: //Down arrow key, move down a level
          if (calc.level > 0) {
            calc.level--;
            setLevel();
          }
          break;
        default:
        //Do nothing
      }
    };

    function drawBrick(brick) {
      //Draw the rectangle for the block
      var x = calc.xToScreen(brick.x());
      var y = calc.yToScreen(brick.y());
      if (x > calc.BRICK_WIDTH * -1 && x < p.width) {
        //p.tint(250, 0, 0);
        if(brick.color() == 1){
          p.image(whiteBrick, 0, 0, whiteBrick.width, whiteBrick.height, x, y, calc.BRICK_WIDTH, calc.BRICK_HEIGHT);
        }else{
          p.image(blackBrick, 0, 0, blackBrick.width, blackBrick.height, x, y, calc.BRICK_WIDTH, calc.BRICK_HEIGHT);
        }

        //Draw the strength lines
        p.strokeWeight(2);
        switch (brick.color()) {
          case 0:
            p.stroke(255);
            break;
          case 1:
            p.stroke(0);
            break;
          default:
            p.stroke(100);
        }
        for (var j = 0; j < brick.strength(); j++) {
          var xLerp = p.lerp(x+5, x + calc.BRICK_WIDTH-5, (j + 1) / (brick.strength() + 1));
          p.line(xLerp, y + 10, xLerp, y + (calc.BRICK_HEIGHT - 10));
        }
      }
    }

    //------------------------------------------OTHER FUNCTIONS------------------------------------

    //Is the given screen coordinates inside the new bricks?
    function withinPlaced(x, y) {
      for (var i = 0; i < newBricks.length; i++) {
        if (newBricks[i].x() == calc.screenToX(x) && newBricks[i].y() == calc.screenToY(y)) {
          return true;
        }
      }
      return false;
    }

    //Takes the new bricks and moves them to the given coordinates
    function updateBricks(x, y){
      if (!calc.withinLevel(x, y)) {
        return false;
      }
      for (var i = 0; i < ar.length; i++) {
        if (!calc.withinLevel(x + ar[i][0], y + ar[i][1])) {
          return false;
        }
      }
      newBricks[0].update(x, y);
      for (var i = 0; i < ar.length; i++) {
        newBricks[i + 1].update(x + ar[i][0], y + ar[i][1]);
      }
    }

    function setLevel() {
      loadLevel(calc.level);
      loadOrders(calc.level, 0);
      if (calc.level == 0) {
        $("#messages").hide();
      } else {
        $("#messages").show();
      }
    }

    //Removes the keyboard and lets you move the bricks again
    function moveBricks() {
      finish = false;

      $('#remove').hide();
      $("#message_form").remove();

      $('#bricks').show();
      $("#messages").show();
      $("#left").show();
      $("#right").show();
      $("#instructions").html(unfinishedText);

      noReadGlyphs();
    }

    function loadLevel(requestedLevel){
      tower = [];
      $.get('/levels/' + requestedLevel + '.json', function(data){
        var level = data["level"];

        requiredStrength = level["strength_requirement"];
        interval = level["update_rate"];
        background = p.loadImage("../" + level['background']);

        var text = level["text"];
        text = text.replace('<nextTime()>', nextTime(interval));
        finishText = text.slice(text.indexOf('|')+2);
        unfinishedText = text.slice(0, text.indexOf('|'));
        updateAlert();
        var towerData = data["bricks"];
        for (var i = 0; i < towerData.length; i++) {
          tower.push(new Brick(towerData[i]["x"], towerData[i]["y"], towerData[i]["color"], towerData[i]["strength"]));
        }
      })
    }

    function updateAlert() {
      if (finish) {
        $("#instructions").html(finishText);
      } else {
        $("#instructions").html(unfinishedText);
      }
    }
  };

  var myp5 = new p5(sketch);

  window.onkeydown = function(e){
    return !(e.keyCode == 32);
  };
});