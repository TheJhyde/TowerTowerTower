$(document).on("page:change", function(){
	//If there's already a canvas loaded or it's the wrong page, don't load this page
	if($("canvas").size() > 0 || $(".build_orders.new").length == 0){
		return false;
	}

	//The P5 sketch in all it's glory
	var sketch = function(p){
		const BRICKS = <%= Rails.configuration.x.shipment %>;
		const maxLevel = <%= Rails.configuration.x.max_levels %>;
		const SHIPMENTSIZE = <%= Rails.configuration.x.shipment_size %>
		
		//const BRICK_WIDTH = 40;
		//const BRICK_HEIGHT = 40;
		//const COLUMNS = 10;
		//const BPL = 12;
		//const BRICKS = 2

		var USER_ID;
		var tower = [];
		var newBricks = [];
		var finish = false;
		var ar = [];

		//-----------------------------------P5 FUNCTIONS---------------------------------------------
		p.setup = function(){
			canvas = p.createCanvas(p.windowWidth - 550, <%= Rails.configuration.x.brick_height %> * <%= Rails.configuration.x.level_height %>);
			canvas.parent("canvas");

			Brick.level = 0;
			loadTower(Brick.level);

			var color = Math.floor(Math.random() * 3);
			for(var i = 0; i < SHIPMENTSIZE; i++){
				newBricks.push(new Brick(-1, -1, p, color));
			}
			generateArrangement();

			$.get('/session.json', function(data){
				USER_ID = data;
			});

		};

		p.draw = function(){
			p.background(200);
			//Draws the bricks from the tower
			p.stroke(0);
			for(var i = 0; i < tower.length; i++){
				tower[i].draw();
			}

			//Draws the bricks which the player just placed
			p.stroke(255);
			p.strokeWeight(2);
			for(var i = 0; i < newBricks.length; i++){
				newBricks[i].draw();
			}

			//Makes these bigger maybe? Or a nicer color?
			p.fill(0);
			p.stroke(0);
			if(Brick.level < maxLevel){
				p.triangle(25, 10, 5, 30, 45, 30);
			}
			if(Brick.level > 0){
				p.triangle(5, 35, 45, 35, 25, 55);
			}
		};

		p.mouseClicked = function(){
			if(p.mouseX > 0 && p.mouseX < p.width && p.mouseY > 0 && p.mouseY < p.height){
				if(p.mouseX > 5 && p.mouseX < 45 && p.mouseY > 10 && p.mouseY < 30 && Brick.level < maxLevel){
					Brick.level++;
					loadTower(Brick.level);
				}else if(p.mouseX > 5 && p.mouseX < 45 && p.mouseY > 35 && p.mouseY < 55 && Brick.level > 0){
					Brick.level--;
					loadTower(Brick.level);
				}else if(!finish){
					finish = true;
					$("#bricks").hide();
					$("#messages").hide();
					$("#alerts").html("<h4>Instructions</h4>Use the glyphs to write a message so other builders know where you placed your bricks. Press S or click on your brick to move it. Click on the orange squares to add glyphs to your message and on the glyphs you've added to delete them.");
					loadKeyboard(newBricks);
				}else if (withinPlaced(p.mouseX, p.mouseY) && finish){
					moveBricks();
				}
			}
		}

		p.mouseMoved = function(){
			if(p.mouseY < p.height && p.mouseY > 0 && p.mouseX > Brick.offset && p.mouseX < (Brick.offset + Brick.towerWidth) && !finish){
				updateBricks(p.mouseX, p.mouseY);
			}
		};

		p.keyPressed = function(){
			//Rotate one way if you press a or left arrow
			if(p.keyCode == 65 || p.keyCode == 37){
				for(var i = 0; i < ar.length; i++){
					var new_ar = [0, 0];
					new_ar[0] = ar[i][1] * -1;
					new_ar[1] = ar[i][0];
					ar[i] = new_ar;
				}
				updateBricks(p.mouseX, p.mouseY);
			//rotate the other way if you press d or right arrow
			}else if(p.keyCode == 68 || p.keyCode == 39){
				for(var i = 0; i < ar.length; i++){
					var new_ar = [0, 0];
					new_ar[1] = ar[i][0] * -1;
					new_ar[0] = ar[i][1];
					ar[i] = new_ar;
				}
				updateBricks(p.mouseX, p.mouseY);
			}else if(p.keyCode == 83 && finish){
				moveBricks();
				updateBricks(p.mouseX, p.mouseY);
			}
		};

		//------------------------------------------OTHER FUNCTIONS------------------------------------
				
		//Generates the arrangement of bricks. Kind of hacky.
		function generateArrangement(){
			for(var i = 0; i < SHIPMENTSIZE-1; i++){
				ar[i] = []
				for(var j = 0; j < 2; j++){
					ar[i][j] = Math.floor(Math.random()*3-1);
				}
			}
			//Don't put a new brick on top of my old brick!
			if(ar[0][0] == 0 && ar[0][1] == 0){
				ar[0][0] = 1;
			}
			if(ar[1][0] == 0 && ar[1][1] == 0){
				ar[1][0] = -1;
			}
			//If the first and second brick are in the same place
			//Throw away one of them
			if(ar[0][0] == ar[1][0] && ar[0][1] == ar[1][1]){
				ar.shift();
			}
		}

		//Is the given screen coordinates inside the new bricks?
		function withinPlaced(x, y){
			for(var i = 0; i < newBricks.length; i++){
				if(newBricks[i].isWithin(y, y)){
					return true;
				}
			}
			return false;
		}

		//Takes the new bricks and moves them to the given coordinates
		function updateBricks(x, y){
			newBricks[0].update(x, y, 0, 0);
			for(var i = 0; i < ar.length; i++){
				newBricks[i+1].update(x, y, ar[i][0], ar[i][1]);
			}
		}

		//Removes the keyboard and lets you move the bricks again
		function moveBricks(){
			finish = false;
			$("#bricks").show();
			$("#messages").show();
			//Throwing this away probably isn't the best approach
			//But it's the approach I'm doing.
			$("#message_form").remove();
			$("#alerts").html("<h4>Instructions</h4>Place your bricks on the tower to build it higher! Steer clear of where other builders have put their bricks - if two bricks collide, they'll both be destroyed. Press A or D to rotate your brick.");
		}

		//Loads the tower from the server
		function loadTower(requestedLevel){
			tower = [];
			$.get('/tower.json', {level: requestedLevel}, function(data){
				for(var i = 0; i < data.length; i++){
					tower.push(new Brick(data[i]["x"], data[i]["y"], p, data[i]["color"]));
				}
			});
		}
	};

	var myp5 = new p5(sketch);
});