$(document).ready(function(){
	//If there's already a canvas loaded or it's the wrong page, don't load this page
	if($("canvas").size() > 0 || $(".tower.index").length == 0){
		return false;
	}

	var sketch = function(p){
		var tower = [];
		var arrow_width;
		var current_brick;
    var current_player;

    var calc;

		//-----------------------------------P5 FUNCTIONS---------------------------------------------
		p.setup = function(){
			var canvas = p.createCanvas(p.windowWidth - 450, <%= Global.tower.brick_height %> * (<%= Global.tower.level_height %> + 1));
      arrow_width = <%= Global.tower.brick_width %>;

      canvas.parent("canvas");
      calc = new BrickCalc(p);
			calc.level = 0;

      $.get('/session.json', function(data){
        current_player = data["id"];
      });

      loadTower();
		};

		p.draw = function(){
			p.background(255);


			//Level markers
			p.noStroke();
			var levelSize = calc.BRICK_HEIGHT * <%= Global.tower.level_height %>;
			for(var i = 0; i < p.width/levelSize + 2; i++){
				p.fill(173 + (i%2)*100, 216, 230);
				p.rect(0, p.height - (calc.BRICK_HEIGHT/2 + levelSize*i + (calc.verticalOffset % (levelSize*2))), p.width, levelSize);
			}

			//Draws the bricks from the tower
			for(var i = 0; i < tower.length; i++){
        drawBrick(tower[i]);
			}

			//Draw navigation arrows
			p.fill(100);
			//Up and down arrows
			if(p.mouseY < arrow_width){
				p.triangle(p.width/2, 5, p.width/2 - 40, (arrow_width-10)/2, p.width/2 + 40, (arrow_width-10)/2);
			}else if(p.mouseY > p.height - arrow_width){
				p.triangle(p.width/2, p.height-5, p.width/2 - 40, p.height - (arrow_width-10)/2, p.width/2 + 40, p.height - (arrow_width-10)/2);
			}

			//Left and right arrows
			if(p.mouseX < arrow_width){
				p.triangle(5, p.height/2, arrow_width-10, p.height/2 - 40, arrow_width - 10, p.height/2 + 40);
			}else if(p.mouseX > p.width - arrow_width){
				p.triangle(p.width - 5, p.height/2, p.width - arrow_width+10, p.height/2 - 40, p.width - arrow_width + 10, p.height/2 + 40);
			}

			//Move right and left
			if(p.mouseX < arrow_width && p.mouseX > 0 && p.mouseY > p.height/2 - 200 && p.mouseY < p.height/2 + 200){
				calc.moveLeft();
			}else if(p.mouseX > p.width-arrow_width && p.mouseX < p.width && p.mouseY > p.height/2 - 200 && p.mouseY < p.height/2 + 200){
				calc.moveRight();
			}

			//This is where the mouse stuff for the up and down go
			if(p.mouseY < arrow_width && p.mouseY > 0 && p.mouseX > p.width/2 - 200 && p.mouseX < p.width/2 + 200){
				calc.moveUp();
			}else if(p.mouseY > p.height-arrow_width && p.mouseY < p.height && p.mouseX > p.width/2 - 200 && p.mouseX < p.width/2 + 200){
				calc.moveDown();
			}
		};

    function drawBrick(brick){
      //Draw the rectangle for the block
      var x = calc.xToScreen(brick.x());
      var y = calc.yToScreen(brick.y());
      if (x > 0 - calc.BRICK_WIDTH && x < p.width && y > 0 - calc.BRICK_HEIGHT && y < p.height) {
        if(brick.playerID == current_player){
          p.fill(200, 0, 0);
        }else{
          switch (brick.color()){
            case 0:
              p.fill(0, 0, 0);
              break;
            case 1:
              p.fill(255, 255, 255);
              break;
            case 2:
              p.fill(0, 0, 200);
              break;
            default:
              p.fill(0);
          }
        }
        p.stroke(0);
        p.strokeWeight(1);
        p.rect(x, y, calc.BRICK_WIDTH, calc.BRICK_HEIGHT);

        //Draw the strength lines
        if(calc.zoom < 2){
          p.strokeWeight(2);
          switch(brick.color()){
            case 0:
              p.stroke(255);
              break;
            case 1:
              p.stroke(0);
              break;
            default:
              p.stroke(100);
          }
          for (var j = 0; j < brick.strength(); j++) {
            var xLerp = p.lerp(x, x + calc.BRICK_WIDTH, (j + 1) / (brick.strength() + 1));
            p.line(xLerp, y + 5, xLerp, y + (calc.BRICK_HEIGHT - 5));
          }
        }
      }
    }

		p.mouseMoved = function(){
			//Find the brick they just moused over
      var x = calc.screenToX(p.mouseX);
      var y = calc.screenToY(p.mouseY);
      var index = -1;
			for(var i = 0; i < tower.length; i++){
        if(tower[i].x() == x && tower[i].y() == y){
          index = i;
          i = tower.length + 1;
        }
      }

			if(index != -1){
				if(index != current_brick){
					current_brick = index;
					$.get('/tower/history/'+ tower[current_brick].id +'.js');
				}
			}else{
				$("#info").html("");
				current_brick = -1;
			}
		};

		function overBrick(x, y){
			for(var i = 0; i < tower.length; i++){
				if(tower[i].isWithin(x, y)){
					return i;
				}
			}
			return -1;
		}

		p.keyPressed = function(){
			switch(p.keyCode){
				case 39: //Right arrow key, move around tower
					calc.moveRight();
					break;
				case 37: //Left arrow key, move around tower
					calc.moveLeft();
					break;
				case 38: //Up arrow key, move up a level
					calc.moveUp();
					break;
				case 40: //Down arrow key, move down a level
					calc.moveDown();
					break;
				case 90: //Zoom out
					calc.makeSmaller();
					break;
				case 81: //Zoom in
					calc.makeLarger();
					break;
				default:
					//Do nothing
			}
		};

		//------------------------------------------OTHER FUNCTIONS------------------------------------
		//Loads the tower from the server
		function loadTower(){
			tower = [];
			$.get('/tower.json', function(data){
				for(var i = 0; i < data.length; i++){
					var brick = new Brick(data[i]["x"], data[i]["y"], data[i]["color"], data[i]["strength"]);
					brick.id = data[i]["id"];
          brick.playerID = data[i]["user_id"];
					tower.push(brick);
				}
			});
		}
	};

	var myp5 = new p5(sketch);
});